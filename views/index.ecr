<!-- Sidebar -->
<div class="sidebar">
    <div class="sidebar-header">
        <button class="new-note-btn" onclick="createNewNote()">+ New Note</button>
    </div>
    <div class="notes-list">
        <% notes.each do |id, title, body, _created_at, updated_at| %>
            <div class="note-item <%= "active" if selected_note && selected_note[0] == id %>" onclick="selectNote(<%= id %>)">
                <div class="note-title"><%= HTML.escape(title.empty? ? "Untitled" : title) %></div>
                <div class="note-preview"><%= HTML.escape(body.size > 50 ? body[0..50] + "..." : body) %></div>
                <div class="note-date"><%= HTML.escape(updated_at.split(" ")[0]) %></div>
            </div>
        <% end %>
        <% if notes.empty? %>
            <div class="note-item">
                <div class="note-title">No notes yet</div>
                <div class="note-preview">Create your first note</div>
            </div>
        <% end %>
    </div>
</div>

<!-- Main Content -->
<div class="main-content">
    <% if notes.empty? %>
        <div class="empty-state">
            Select a note to start editing
        </div>
    <% elsif selected_note %>
        <div class="editor-header">
            <input type="text" class="editor-title" id="note-title"
                   value="<%= HTML.escape(selected_note[1]) %>"
                   placeholder="Note title">
        </div>
        <div class="editor-content">
            <textarea class="editor-textarea" id="note-body"
                      placeholder="Start writing..."><%= HTML.escape(selected_note[2]) %></textarea>
        </div>
        <div class="editor-actions">
            <button class="btn" onclick="saveNote(<%= selected_note[0] %>)">Save</button>
            <button class="btn btn-delete" onclick="deleteNote(<%= selected_note[0] %>)">Delete</button>
        </div>
    <% else %>
        <div class="empty-state">
            Select a note to start editing
        </div>
    <% end %>
</div>

<script>
let currentNoteId = <%= notes.empty? || !selected_note ? "null" : selected_note[0] %>;
let originalTitle = '';
let originalBody = '';
let hasUnsavedChanges = false;

// Record initial values
document.addEventListener('DOMContentLoaded', function() {
    const titleInput = document.getElementById('note-title');
    const bodyTextarea = document.getElementById('note-body');

    if (titleInput && bodyTextarea) {
        originalTitle = titleInput.value;
        originalBody = bodyTextarea.value;
    }
});

function checkForChanges() {
    if (!currentNoteId) return false;

    const titleInput = document.getElementById('note-title');
    const bodyTextarea = document.getElementById('note-body');

    if (!titleInput || !bodyTextarea) return false;

    const currentTitle = titleInput.value;
    const currentBody = bodyTextarea.value;

    hasUnsavedChanges = (currentTitle !== originalTitle || currentBody !== originalBody);
    return hasUnsavedChanges;
}

function selectNote(noteId) {
    // Save current note if it has changes
    if (currentNoteId && checkForChanges()) {
        saveNoteSync(currentNoteId);
    }

    // Remove active class from all notes
    document.querySelectorAll('.note-item').forEach(item => {
        item.classList.remove('active');
    });

    // Add active class to clicked note
    event.target.closest('.note-item').classList.add('active');

    // Load note content (for now, we'll just redirect)
    window.location.href = '/?note=' + noteId;
}

async function createNewNote() {
    // Save current note if it has changes
    if (currentNoteId && checkForChanges()) {
        try {
            await saveNoteAsync(currentNoteId);
        } catch (error) {
            console.error('Failed to save:', error);
            if (!confirm('Failed to save current note. Do you want to create a new note?')) {
                return;
            }
        }
    }

    const title = 'Untitled';
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/notes';
    form.style.display = 'none';

    const titleInput = document.createElement('input');
    titleInput.name = 'title';
    titleInput.value = title;

    const bodyInput = document.createElement('textarea');
    bodyInput.name = 'body';
    bodyInput.value = '';

    form.appendChild(titleInput);
    form.appendChild(bodyInput);
    document.body.appendChild(form);
    form.submit();
}

// Async save function
async function saveNoteAsync(noteId) {
    const title = document.getElementById('note-title').value;
    const body = document.getElementById('note-body').value;

    const formData = new FormData();
    formData.append('title', title);
    formData.append('body', body);

    const response = await fetch('/notes/' + noteId + '/update', {
        method: 'POST',
        body: formData,
        headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    });

    if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: 'Failed to save' }));
        throw new Error(errorData.message || 'Failed to save');
    }

    // Check response
    const result = await response.json();
    if (result.status !== 'success') {
        throw new Error(result.message || 'Failed to save');
    }

    // Update original values on successful save
    originalTitle = title;
    originalBody = body;
    hasUnsavedChanges = false;
}

// Sync save function (traditional method)
function saveNote(noteId) {
    const title = document.getElementById('note-title').value;
    const body = document.getElementById('note-body').value;

    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/notes/' + noteId + '/update';
    form.style.display = 'none';

    const titleInput = document.createElement('input');
    titleInput.name = 'title';
    titleInput.value = title;

    const bodyInput = document.createElement('textarea');
    bodyInput.name = 'body';
    bodyInput.value = body;

    form.appendChild(titleInput);
    form.appendChild(bodyInput);
    document.body.appendChild(form);
    form.submit();
}

// Sync save function using sendBeacon
function saveNoteSync(noteId) {
    const title = document.getElementById('note-title').value;
    const body = document.getElementById('note-body').value;

    const formData = new FormData();
    formData.append('title', title);
    formData.append('body', body);

    // Send reliably with sendBeacon
    if (navigator.sendBeacon) {
        navigator.sendBeacon('/notes/' + noteId + '/update', formData);
    } else {
        // Fallback to fetch with keepalive if sendBeacon is not available
        fetch('/notes/' + noteId + '/update', {
            method: 'POST',
            body: formData,
            keepalive: true
        });
    }

    // Update original values after save
    originalTitle = title;
    originalBody = body;
    hasUnsavedChanges = false;
}

function deleteNote(noteId) {
    const button = event.target;

    if (button.textContent === 'Delete') {
        button.textContent = 'Really Delete?';
        button.style.backgroundColor = '#ff4444';
        button.style.color = 'white';
        setTimeout(() => {
            button.textContent = 'Delete';
            button.style.backgroundColor = '';
            button.style.color = '';
        }, 3000);
    } else {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/notes/' + noteId + '/delete';
        form.style.display = 'none';
        document.body.appendChild(form);
        form.submit();
    }
}

// Auto-save functionality
let saveTimeout;
function autoSave() {
    if (currentNoteId) {
        clearTimeout(saveTimeout);
        saveTimeout = setTimeout(() => {
            saveNote(currentNoteId);
        }, 3000);
    }
}

// Add auto-save listeners and change detection
document.addEventListener('DOMContentLoaded', function() {
    const titleInput = document.getElementById('note-title');
    const bodyTextarea = document.getElementById('note-body');

    if (titleInput) {
        titleInput.addEventListener('input', autoSave);
        titleInput.addEventListener('input', checkForChanges);
    }
    if (bodyTextarea) {
        bodyTextarea.addEventListener('input', autoSave);
        bodyTextarea.addEventListener('input', checkForChanges);
    }
});

// Save on window unload
window.addEventListener('beforeunload', function(e) {
    if (currentNoteId && checkForChanges()) {
        // Save reliably with sendBeacon
        saveNoteSync(currentNoteId);

        // Show browser confirmation dialog (optional)
        e.preventDefault();
        e.returnValue = '';
        return '';
    }
});

// Save when page visibility changes (tab switching, etc.)
document.addEventListener('visibilitychange', function() {
    if (document.hidden && currentNoteId && checkForChanges()) {
        saveNoteSync(currentNoteId);
    }
});
</script>
