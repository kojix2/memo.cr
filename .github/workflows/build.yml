name: Build

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-gnu
        include:
          - target: x86_64-pc-windows-gnu
            os: windows-latest

    runs-on: ${{ matrix.os }}

    env:
      BIN: memo
      VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup MSYS2 (Windows MinGW64)
        if: matrix.target == 'x86_64-pc-windows-gnu'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            make
            unzip
            zip
            curl
            mingw-w64-x86_64-crystal
            mingw-w64-x86_64-shards
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-sqlite3

      - name: Fetch WebView2 headers (NuGet)
        if: matrix.target == 'x86_64-pc-windows-gnu'
        shell: msys2 {0}
        env:
          WV2_VER: 1.0.1150.38
        run: |
          mkdir -p _wv2 && cd _wv2
          curl -L "https://www.nuget.org/api/v2/package/Microsoft.Web.WebView2/${WV2_VER}" -o webview2.nupkg
          unzip -q webview2.nupkg build/native/include/*.h

      - name: Build on Windows (MinGW64)
        if: matrix.target == 'x86_64-pc-windows-gnu'
        shell: msys2 {0}
        env:
          CXX: "g++ -I${{ github.workspace }}/_wv2/build/native/include"
          CXXFLAGS: "-DWEBVIEW_EDGE=1 -DWEBVIEW_BUILD_SHARED=1 -std=c++14"
        run: |
          shards install --without-development
          WIN_PWD=$(pwd -W)
          WIN_PWD=${WIN_PWD//\\/\/}
          LINKDIR="$WIN_PWD/lib/webview/ext"
          echo "Using LINKDIR=$LINKDIR"
            shards build --release --static \
            --link-flags="-L $LINKDIR \
            -Wl,--start-group \
            -lwebview \
            -lstdc++ \
            -Wl,--end-group \
            -lshlwapi \
            -lversion" \
            -Dpreview_mt
          file bin/$BIN.exe
          bin/$BIN --help
          PKG=memo-${VERSION}-${{ matrix.target }}
          mkdir -p $PKG
          cp bin/$BIN.exe $PKG/
          cp LICENSE $PKG/ || echo "LICENSE file not found"
          cp README.md $PKG/ || echo "README.md file not found"
          zip -r $PKG.zip $PKG

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: memo-${{ matrix.target }}
          path: |
            *.zip
            *.tar.gz
